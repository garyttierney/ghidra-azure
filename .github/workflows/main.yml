name: Build distributions and container images
on: push
jobs:
  prepare_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
        if: ${{ github.ref == 'refs/heads/master' }}

      - name: Detect version of Ghidra
        id: ghidra_version
        run: |
          while IFS='=' read -r var value; do
            normalized_var=$(sed 's/\./_/g' <<< "$var")
            declare "$normalized_var=$value"
          done < ghidra/upstream/Ghidra/application.properties

          echo "::set-output name=release_name::$application_name ${application_version}-${application_release_name} ($(date -u -I))"
          echo "::set-output name=release_tag::${application_version}_${application_release_name}_$(date -u +%s)"
        shell: bash
        if: ${{ github.ref == 'refs/heads/master' }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.ghidra_version.outputs.release_tag }}
          release_name: ${{ steps.ghidra_version.outputs.release_name }}
          body: |
            Automated release management from GitHub actions
          draft: false
          prerelease: false
        if: ${{ github.ref == 'refs/heads/master' }}

  build_distribution:
    needs:
      - prepare_release
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Install Java 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          java-package: jdk
          architecture: x64

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/settings.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Cache Ghidra dependency repository
        uses: actions/cache@v2
        with:
          path: ghidra/upstream/flatRepo
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/fetchDependencies.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Install dependencies [${{ matrix.os }}]
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install -y winflexbison
        if: ${{ matrix.os == 'windows-latest' }}

      - name: Fix win_flex.exe and win_bison.exe command names
        run: |
          Rename-Item (Get-Command win_flex).Path flex.exe
          Rename-Item (Get-Command win_bison).Path bison.exe
        if: ${{ matrix.os == 'windows-latest' }}

      - name: Apply Ghidra patches
        working-directory: ghidra/upstream
        shell: pwsh
        run: |
          git config --global user.name "Gary Tierney"
          git config --global user.email "gary.tierney+ghidra-automation@fastmail.com"

          foreach ($uri in Get-Content ..\patches.txt) {
              if (!$uri.StartsWith('#')){
                  echo "Applying $uri"

                  Invoke-WebRequest -UseBasicParsing $uri -OutFile latest.patch
                  git am latest.patch
                  rm latest.patch
              }
          }

      - name: Download Ghidra dependency repository
        working-directory: ghidra/upstream
        run: |
          gradle --init-script gradle/support/fetchDependencies.gradle init --quiet 2>&1 > ghidra-dependencies.log
        env:
          GRADLE_OPTS:  -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Dorg.gradle.daemon=false

      - name: Build Ghidra
        working-directory: ghidra/upstream
        run: |
          gradle buildGhidra
        env:
          GRADLE_OPTS: -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Dorg.gradle.daemon=false

      - name: Unpack archive for out of tree extension builds
        working-directory: ghidra/upstream
        shell: pwsh
        run: |
          Expand-Archive -Path build/dist/*.zip -DestinationPath exploded

      - name: Build C++ Class Analyzer
        working-directory: ghidra/ext-cpp-class-analyzer
        run: |
          gradle buildExtension
          mv dist/*.zip "${{ github.workspace }}/ghidra/upstream/exploded/ghidra_9.3_DEV/Extensions/Ghidra"
        env:
          GHIDRA_INSTALL_DIR: ${{ github.workspace }}/ghidra/upstream/exploded/ghidra_9.3_DEV/

      - name: Repack Ghidra archive with additions
        shell: pwsh
        run: |
          Compress-Archive -Path "${{ github.workspace }}/ghidra/upstream/exploded/ghidra_9.3_DEV" -DestinationPath ghidra.zip
          mkdir -p public/builds/
          cp ghidra.zip ghidra-${{ matrix.os }}.zip

      - name: Archive distribution
        uses: actions/upload-artifact@v2
        with:
          name: ghidra-distribution-${{ matrix.os }}
          path: ghidra.zip

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.build_distribution.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ghidra.zip
          asset_name: ghidra-distribution-${{ matrix.os }}
          asset_content_type: application/zip
        if: ${{ github.ref == 'refs/heads/master' }}
